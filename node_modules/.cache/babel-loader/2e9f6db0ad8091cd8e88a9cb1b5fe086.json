{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senethg\\\\Desktop\\\\Mobile App\\\\Test\\\\test server\\\\Gymekalk\\\\client\\\\src\\\\components\\\\Register.js\";\n// import React, { useState } from 'react';\n// import { Box, Button, FormControl, FormLabel, Grid, GridItem, Input } from '@chakra-ui/react';\n// import { ChakraProvider } from '@chakra-ui/react';\n// const Register = () => {\n//     const [formData, setFormData] = useState({\n//         fname: '',\n//         email: '',\n//         password: '',\n//         cpassword: '',\n//         role: '',\n//         firstName: '',\n//         lastName: '',\n//         designation: '',\n//         education: '',\n//         address: '',\n//         dob: '',\n//         nic: '',\n//         telephoneNumber: '',\n//         available: '',\n//         nationality: '',\n//         consultantType: '',\n//         availableTime: '',\n//         description: '',\n//         photo: null,\n//         cv: null\n//     });\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setFormData({ ...formData, [name]: value });\n//     };\n//     const handleFileChange = (e) => {\n//         const { name, files } = e.target;\n//         setFormData({ ...formData, [name]: files[0] });\n//     };\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         const formDataToSend = new FormData();\n//         for (let key in formData) {\n//             formDataToSend.append(key, formData[key]);\n//         }\n//         try {\n//             const response = await fetch('http://localhost:8009/register', {\n//                 method: 'POST',\n//                 body: formDataToSend\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Failed to register');\n//             }\n//             const responseData = await response.json();\n//             console.log('Registration successful:', responseData);\n//         } catch (error) {\n//             console.error('Error registering:', error.message);\n//         }\n//     };\n//     return (\n//         <ChakraProvider>\n//         <Box maxW=\"md\" mx=\"auto\" p=\"6\">\n//             <form onSubmit={handleSubmit}>\n//                 <Grid templateColumns=\"repeat(2, 1fr)\" gap={4}>\n//                     <GridItem colSpan={1}>\n//                         <FormControl isRequired>\n//                             <FormLabel>User Name</FormLabel>\n//                             <Input name=\"fname\" value={formData.fname} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Email</FormLabel>\n//                             <Input type=\"email\" name=\"email\" value={formData.email} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Password</FormLabel>\n//                             <Input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Confirm Password</FormLabel>\n//                             <Input type=\"password\" name=\"cpassword\" value={formData.cpassword} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Role</FormLabel>\n//                             <Input type=\"password\" name=\"cpassword\" value={formData.cpassword} onChange={handleChange} />\n//                         </FormControl>\n//                         {/* Add more basic details form fields */}\n//                     </GridItem>\n//                     <GridItem colSpan={1}>\n//                         <FormControl isRequired>\n//                             <FormLabel>Last Name</FormLabel>\n//                             <Input name=\"lastName\" value={formData.lastName} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Designation</FormLabel>\n//                             <Input name=\"designation\" value={formData.designation} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Education</FormLabel>\n//                             <Input name=\"education\" value={formData.education} onChange={handleChange} />\n//                         </FormControl>\n//                         <FormControl isRequired>\n//                             <FormLabel>Address</FormLabel>\n//                             <Input name=\"address\" value={formData.address} onChange={handleChange} />\n//                         </FormControl>\n//                         {/* Add more additional details form fields */}\n//                     </GridItem>\n//                 </Grid>\n//                 <FormControl>\n//                     <FormLabel>Upload Photo</FormLabel>\n//                     <Input type=\"file\" name=\"photo\" onChange={handleFileChange} />\n//                 </FormControl>\n//                 <FormControl>\n//                     <FormLabel>Upload CV</FormLabel>\n//                     <Input type=\"file\" name=\"cv\" onChange={handleFileChange} />\n//                 </FormControl>\n//                 <Button type=\"submit\" colorScheme=\"blue\">Register</Button>\n//             </form>\n//         </Box>\n//         </ChakraProvider>\n//     );\n// };\n// export default Register;\nimport React, { useState } from 'react';\nimport { Box, Button, FormControl, FormLabel, Grid, GridItem, Input, Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  // const [formData, setFormData] = useState({\n  //     fname: '',\n  //     email: '',\n  //     password: '',\n  //     cpassword: '',\n  //     role: '',\n  //     firstName: '',\n  //     lastName: '',\n  //     designation: '',\n  //     education: '',\n  //     address: '',\n  //     dob: '',\n  //     nic: '',\n  //     telephoneNumber: '',\n  //     available: '',\n  //     nationality: '',\n  //     consultantType: '',\n  //     availableTime: '',\n  //     description: '',\n  //     photo: null,\n  //     cv: null\n  // });\n  // const handleChange = (e) => {\n  //     const { name, value } = e.target;\n  //     setFormData({ ...formData, [name]: value });\n  // };\n  // const handleFileChange = (e) => {\n  //     const { name, files } = e.target;\n  //     setFormData({ ...formData, [name]: files[0] });\n  // };\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //     const formDataToSend = new FormData();\n  //     for (let key in formData) {\n  //         formDataToSend.append(key, formData[key]);\n  //     }\n  //     try {\n  //         const response = await fetch('http://localhost:8009/register', {\n  //             method: 'POST',\n  //             body: formDataToSend\n  //         });\n  //         if (!response.ok) {\n  //             throw new Error('Failed to register');\n  //         }\n  //         const responseData = await response.json();\n  //         console.log('Registration successful:', responseData);\n  //     } catch (error) {\n  //         console.error('Error registering:', error.message);\n  //     }\n  // };\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      maxW: \"md\",\n      mx: \"auto\",\n      p: \"6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-30 bg-blue-500\",\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          isFitted: true,\n          variant: \"enclosed\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(TabList, {\n            mb: \"1em\",\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              children: \"One\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              children: \"Two\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TabPanels, {\n            children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"one!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"two!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","Box","Button","FormControl","FormLabel","Grid","GridItem","Input","Tabs","TabList","TabPanels","Tab","TabPanel","ChakraProvider","Register"],"sources":["C:/Users/senethg/Desktop/Mobile App/Test/test server/Gymekalk/client/src/components/Register.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Box, Button, FormControl, FormLabel, Grid, GridItem, Input } from '@chakra-ui/react';\r\n// import { ChakraProvider } from '@chakra-ui/react';\r\n\r\n// const Register = () => {\r\n//     const [formData, setFormData] = useState({\r\n//         fname: '',\r\n//         email: '',\r\n//         password: '',\r\n//         cpassword: '',\r\n//         role: '',\r\n//         firstName: '',\r\n//         lastName: '',\r\n//         designation: '',\r\n//         education: '',\r\n//         address: '',\r\n//         dob: '',\r\n//         nic: '',\r\n//         telephoneNumber: '',\r\n//         available: '',\r\n//         nationality: '',\r\n//         consultantType: '',\r\n//         availableTime: '',\r\n//         description: '',\r\n//         photo: null,\r\n//         cv: null\r\n//     });\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setFormData({ ...formData, [name]: value });\r\n//     };\r\n\r\n//     const handleFileChange = (e) => {\r\n//         const { name, files } = e.target;\r\n//         setFormData({ ...formData, [name]: files[0] });\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n\r\n//         const formDataToSend = new FormData();\r\n//         for (let key in formData) {\r\n//             formDataToSend.append(key, formData[key]);\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch('http://localhost:8009/register', {\r\n//                 method: 'POST',\r\n//                 body: formDataToSend\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 throw new Error('Failed to register');\r\n//             }\r\n\r\n//             const responseData = await response.json();\r\n//             console.log('Registration successful:', responseData);\r\n//         } catch (error) {\r\n//             console.error('Error registering:', error.message);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <ChakraProvider>\r\n//         <Box maxW=\"md\" mx=\"auto\" p=\"6\">\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <Grid templateColumns=\"repeat(2, 1fr)\" gap={4}>\r\n//                     <GridItem colSpan={1}>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>User Name</FormLabel>\r\n//                             <Input name=\"fname\" value={formData.fname} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Email</FormLabel>\r\n//                             <Input type=\"email\" name=\"email\" value={formData.email} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Password</FormLabel>\r\n//                             <Input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Confirm Password</FormLabel>\r\n//                             <Input type=\"password\" name=\"cpassword\" value={formData.cpassword} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Role</FormLabel>\r\n//                             <Input type=\"password\" name=\"cpassword\" value={formData.cpassword} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         {/* Add more basic details form fields */}\r\n//                     </GridItem>\r\n//                     <GridItem colSpan={1}>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Last Name</FormLabel>\r\n//                             <Input name=\"lastName\" value={formData.lastName} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Designation</FormLabel>\r\n//                             <Input name=\"designation\" value={formData.designation} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Education</FormLabel>\r\n//                             <Input name=\"education\" value={formData.education} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         <FormControl isRequired>\r\n//                             <FormLabel>Address</FormLabel>\r\n//                             <Input name=\"address\" value={formData.address} onChange={handleChange} />\r\n//                         </FormControl>\r\n//                         {/* Add more additional details form fields */}\r\n//                     </GridItem>\r\n//                 </Grid>\r\n//                 <FormControl>\r\n//                     <FormLabel>Upload Photo</FormLabel>\r\n//                     <Input type=\"file\" name=\"photo\" onChange={handleFileChange} />\r\n//                 </FormControl>\r\n//                 <FormControl>\r\n//                     <FormLabel>Upload CV</FormLabel>\r\n//                     <Input type=\"file\" name=\"cv\" onChange={handleFileChange} />\r\n//                 </FormControl>\r\n//                 <Button type=\"submit\" colorScheme=\"blue\">Register</Button>\r\n//             </form>\r\n//         </Box>\r\n//         </ChakraProvider>\r\n//     );\r\n// };\r\n\r\n// export default Register;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { Box, Button, FormControl, FormLabel, Grid, GridItem, Input, Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\n\r\nconst Register = () => {\r\n    // const [formData, setFormData] = useState({\r\n    //     fname: '',\r\n    //     email: '',\r\n    //     password: '',\r\n    //     cpassword: '',\r\n    //     role: '',\r\n    //     firstName: '',\r\n    //     lastName: '',\r\n    //     designation: '',\r\n    //     education: '',\r\n    //     address: '',\r\n    //     dob: '',\r\n    //     nic: '',\r\n    //     telephoneNumber: '',\r\n    //     available: '',\r\n    //     nationality: '',\r\n    //     consultantType: '',\r\n    //     availableTime: '',\r\n    //     description: '',\r\n    //     photo: null,\r\n    //     cv: null\r\n    // });\r\n\r\n    // const handleChange = (e) => {\r\n    //     const { name, value } = e.target;\r\n    //     setFormData({ ...formData, [name]: value });\r\n    // };\r\n\r\n    // const handleFileChange = (e) => {\r\n    //     const { name, files } = e.target;\r\n    //     setFormData({ ...formData, [name]: files[0] });\r\n    // };\r\n\r\n    // const handleSubmit = async (e) => {\r\n    //     e.preventDefault();\r\n\r\n    //     const formDataToSend = new FormData();\r\n    //     for (let key in formData) {\r\n    //         formDataToSend.append(key, formData[key]);\r\n    //     }\r\n\r\n    //     try {\r\n    //         const response = await fetch('http://localhost:8009/register', {\r\n    //             method: 'POST',\r\n    //             body: formDataToSend\r\n    //         });\r\n\r\n    //         if (!response.ok) {\r\n    //             throw new Error('Failed to register');\r\n    //         }\r\n\r\n    //         const responseData = await response.json();\r\n    //         console.log('Registration successful:', responseData);\r\n    //     } catch (error) {\r\n    //         console.error('Error registering:', error.message);\r\n    //     }\r\n    // };\r\n\r\n    return (\r\n        <ChakraProvider>\r\n            <Box maxW=\"md\" mx=\"auto\" p=\"6\">\r\n            <div className='m-30 bg-blue-500'>\r\n            <Tabs isFitted variant='enclosed'> {/* Adjust the width as needed */}\r\n                <TabList mb='1em'>\r\n                    <Tab>One</Tab>\r\n                    <Tab>Two</Tab>\r\n                </TabList>\r\n                <TabPanels>\r\n                    <TabPanel>\r\n                        <p>one!</p>\r\n                    </TabPanel>\r\n                    <TabPanel>\r\n                        <p>two!</p>\r\n                    </TabPanel>\r\n                </TabPanels>\r\n            </Tabs>\r\n        </div>\r\n\r\n            </Box>\r\n      \r\n            \r\n        </ChakraProvider>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"mappingsgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,WAAtB,EAAmCC,SAAnC,EAA8CC,IAA9C,EAAoDC,QAApD,EAA8DC,KAA9D,EAAqEC,IAArE,EAA2EC,OAA3E,EAAoFC,SAApF,EAA+FC,GAA/F,EAAoGC,QAApG,QAAoH,kBAApH;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EACnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA,oBACI,QAAC,cAAD;IAAA,uBACI,QAAC,GAAD;MAAK,IAAI,EAAC,IAAV;MAAe,EAAE,EAAC,MAAlB;MAAyB,CAAC,EAAC,GAA3B;MAAA,uBACA;QAAK,SAAS,EAAC,kBAAf;QAAA,uBACA,QAAC,IAAD;UAAM,QAAQ,MAAd;UAAe,OAAO,EAAC,UAAvB;UAAA,6BACI,QAAC,OAAD;YAAS,EAAE,EAAC,KAAZ;YAAA,wBACI,QAAC,GAAD;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QADJ,eAEI,QAAC,GAAD;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAFJ;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAKI,QAAC,SAAD;YAAA,wBACI,QAAC,QAAD;cAAA,uBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YADJ;cAAA;cAAA;cAAA;YAAA,QADJ,eAII,QAAC,QAAD;cAAA,uBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YADJ;cAAA;cAAA;cAAA;YAAA,QAJJ;UAAA;YAAA;YAAA;YAAA;UAAA,QALJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADA;QAAA;QAAA;QAAA;MAAA;IADA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAyBH,CApFD;;KAAMA,Q;AAsFN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}