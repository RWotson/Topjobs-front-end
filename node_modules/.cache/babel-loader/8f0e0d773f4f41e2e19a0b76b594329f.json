{"ast":null,"code":"'use client'; // src/use-why-update.ts\n\nimport { useEffect, useRef } from \"react\";\n\nfunction useWhyDidYouUpdate(name, props) {\n  const previousProps = useRef();\n  useEffect(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current,\n        ...props\n      });\n      const changesObj = {};\n      allKeys.forEach(key => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj);\n      }\n    }\n\n    previousProps.current = props;\n  });\n}\n\nexport { useWhyDidYouUpdate };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEO,SAASC,kBAAT,CAA4BC,IAA5B,EAA0CC,KAA1C,EAAsD;EAC3D,MAAMC,gBAAgBJ,QAAtB;EAEAD,UAAU,MAAM;IACd,IAAIK,cAAcC,OAAlB,EAA2B;MACzB,MAAMC,UAAUC,OAAOC,IAAP,CAAY,EAAE,GAAGJ,cAAcC,OAAnB;QAA4B,GAAGF;MAA/B,CAAZ,CAAhB;MACA,MAAMM,aAAkC,EAAxC;MACAH,QAAQI,OAAR,CAAiBC,GAAD,IAAS;QACvB,IAAIP,cAAcC,OAAd,CAAsBM,GAAtB,MAA+BR,MAAMQ,GAAN,CAAnC,EAA+C;UAC7CF,WAAWE,GAAX,IAAkB;YAChBC,MAAMR,cAAcC,OAAd,CAAsBM,GAAtB,CADU;YAEhBE,IAAIV,MAAMQ,GAAN;UAFY,CAAlB;QAIF;MACD,CAPD;;MASA,IAAIJ,OAAOC,IAAP,CAAYC,UAAZ,EAAwBK,MAA5B,EAAoC;QAClCC,QAAQC,GAAR,CAAY,sBAAZ,EAAoCd,IAApC,EAA0CO,UAA1C;MACF;IACF;;IAEAL,cAAcC,OAAd,GAAwBF,KAAxB;EACD,CAnBD;AAoBF","names":["useEffect","useRef","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","Object","keys","changesObj","forEach","key","from","to","length","console","log"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-why-update.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\"\n\nexport function useWhyDidYouUpdate(name: string, props: any) {\n  const previousProps = useRef<any>()\n\n  useEffect(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current, ...props })\n      const changesObj: Record<string, any> = {}\n      allKeys.forEach((key) => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key],\n          }\n        }\n      })\n\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj)\n      }\n    }\n\n    previousProps.current = props\n  })\n}\n"]},"metadata":{},"sourceType":"module"}