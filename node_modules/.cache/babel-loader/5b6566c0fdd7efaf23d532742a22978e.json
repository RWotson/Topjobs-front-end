{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-event-listener.ts\n\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useEffect } from \"react\";\n\nfunction useEventListener(event, handler, env, options) {\n  const listener = useCallbackRef(handler);\n  useEffect(() => {\n    var _a;\n\n    const node = (_a = runIfFn(env)) != null ? _a : document;\n\n    if (!handler) {\n      return;\n    }\n\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener, handler]);\n  return () => {\n    var _a;\n\n    const node = (_a = runIfFn(env)) != null ? _a : document;\n    node.removeEventListener(event, listener, options);\n  };\n}\n\nexport { useEventListener };","map":{"version":3,"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAiBO,SAASC,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;EACA,MAAMC,WAAWC,eAAeJ,OAAf,CAAjB;EAEAH,UAAU,MAAM;IA1BlB;;IA2BI,MAAMQ,QAAOC,aAAQL,GAAR,CAAP,KAAO,IAAP,GAAOK,EAAP,GAAuBC,QAA7B;;IAEA,IAAI,CAACP,OAAL,EAAc;MACZ;IACF;;IAEAK,KAAKG,gBAAL,CAAsBT,KAAtB,EAA6BI,QAA7B,EAAuCD,OAAvC;IACA,OAAO,MAAM;MACXG,KAAKI,mBAAL,CAAyBV,KAAzB,EAAgCI,QAAhC,EAA0CD,OAA1C;IACF,CAFA;EAGF,CAXA,EAWG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBC,QAAtB,EAAgCH,OAAhC,CAXH;EAaA,OAAO,MAAM;IAvCf;;IAwCI,MAAMK,QAAOC,aAAQL,GAAR,CAAP,KAAO,IAAP,GAAOK,EAAP,GAAuBC,QAA7B;IACAF,KAAKI,mBAAL,CAAyBV,KAAzB,EAAgCI,QAAhC,EAA0CD,OAA1C;EACF,CAHA;AAIF","names":["runIfFn","useEffect","useEventListener","event","handler","env","options","listener","useCallbackRef","node","_a","document","addEventListener","removeEventListener"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-event-listener.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useEffect } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param env the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler?: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    if (!handler) {\n      return\n    }\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener, handler])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}