{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-outside-click.ts\n\nimport { getOwnerDocument } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\n\nfunction useOutsideClick(props) {\n  const {\n    ref,\n    handler,\n    enabled = true\n  } = props;\n  const savedHandler = useCallbackRef(handler);\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  const state = stateRef.current;\n  useEffect(() => {\n    if (!enabled) return;\n\n    const onPointerDown = e => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n\n    const onMouseUp = event => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n\n    const onTouchEnd = event => {\n      state.ignoreEmulatedMouseEvents = true;\n\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n\n    const doc = getOwnerDocument(ref.current);\n    doc.addEventListener(\"mousedown\", onPointerDown, true);\n    doc.addEventListener(\"mouseup\", onMouseUp, true);\n    doc.addEventListener(\"touchstart\", onPointerDown, true);\n    doc.addEventListener(\"touchend\", onTouchEnd, true);\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true);\n      doc.removeEventListener(\"mouseup\", onMouseUp, true);\n      doc.removeEventListener(\"touchstart\", onPointerDown, true);\n      doc.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state, enabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  var _a;\n\n  const target = event.target;\n\n  if (target) {\n    const doc = getOwnerDocument(target);\n    if (!doc.contains(target)) return false;\n  }\n\n  return !((_a = ref.current) == null ? void 0 : _a.contains(target));\n}\n\nexport { useOutsideClick };","map":{"version":3,"mappings":";;;;AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAwBO,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;EAC3D,MAAM;IAAEC,GAAF;IAAOC,OAAP;IAAgBC,UAAU;EAA1B,IAAmCH,KAAzC;EACA,MAAMI,eAAeC,eAAeH,OAAf,CAArB;EAEA,MAAMI,WAAWR,OAAO;IACtBS,eAAe,KADO;IAEtBC,2BAA2B;EAFL,CAAP,CAAjB;EAKA,MAAMC,QAAQH,SAASI,OAAvB;EAEAb,UAAU,MAAM;IACd,IAAI,CAACM,OAAL,EAAc;;IACd,MAAMQ,gBAAsBC,CAAD,IAAqB;MAC9C,IAAIC,aAAaD,CAAb,EAAgBX,GAAhB,CAAJ,EAA0B;QACxBQ,MAAMF,aAAN,GAAsB,IAAtB;MACF;IACF,CAJA;;IAMA,MAAMO,YAAkBC,KAAD,IAAuB;MAC5C,IAAIN,MAAMD,yBAAV,EAAqC;QACnCC,MAAMD,yBAAN,GAAkC,KAAlC;QACA;MACF;;MAEA,IAAIC,MAAMF,aAAN,IAAuBL,OAAvB,IAAkCW,aAAaE,KAAb,EAAoBd,GAApB,CAAtC,EAAgE;QAC9DQ,MAAMF,aAAN,GAAsB,KAAtB;QACAH,aAAaW,KAAb;MACF;IACF,CAVA;;IAYA,MAAMC,aAAcD,KAAD,IAAuB;MACxCN,MAAMD,yBAAN,GAAkC,IAAlC;;MACA,IAAIN,WAAWO,MAAMF,aAAjB,IAAkCM,aAAaE,KAAb,EAAoBd,GAApB,CAAtC,EAAgE;QAC9DQ,MAAMF,aAAN,GAAsB,KAAtB;QACAH,aAAaW,KAAb;MACF;IACF,CANA;;IAQA,MAAME,MAAMrB,iBAAiBK,IAAIS,OAArB,CAAZ;IACAO,IAAIC,gBAAJ,CAAqB,WAArB,EAAkCP,aAAlC,EAAiD,IAAjD;IACAM,IAAIC,gBAAJ,CAAqB,SAArB,EAAgCJ,SAAhC,EAA2C,IAA3C;IACAG,IAAIC,gBAAJ,CAAqB,YAArB,EAAmCP,aAAnC,EAAkD,IAAlD;IACAM,IAAIC,gBAAJ,CAAqB,UAArB,EAAiCF,UAAjC,EAA6C,IAA7C;IAEA,OAAO,MAAM;MACXC,IAAIE,mBAAJ,CAAwB,WAAxB,EAAqCR,aAArC,EAAoD,IAApD;MACAM,IAAIE,mBAAJ,CAAwB,SAAxB,EAAmCL,SAAnC,EAA8C,IAA9C;MACAG,IAAIE,mBAAJ,CAAwB,YAAxB,EAAsCR,aAAtC,EAAqD,IAArD;MACAM,IAAIE,mBAAJ,CAAwB,UAAxB,EAAoCH,UAApC,EAAgD,IAAhD;IACF,CALA;EAMF,CAxCA,EAwCG,CAACd,OAAD,EAAUD,GAAV,EAAeG,YAAf,EAA6BK,KAA7B,EAAoCN,OAApC,CAxCH;AAyCF;;AAEA,SAASU,YAAT,CAAsBE,KAAtB,EAAoCd,GAApC,EAAuE;EA/EvE;;EAgFE,MAAMmB,SAASL,MAAMK,MAArB;;EAEA,IAAIA,MAAJ,EAAY;IACV,MAAMH,MAAMrB,iBAAiBwB,MAAjB,CAAZ;IACA,IAAI,CAACH,IAAII,QAAJ,CAAaD,MAAb,CAAL,EAA2B,OAAO,KAAP;EAC7B;;EAEA,OAAO,GAACE,SAAIZ,OAAL,KAAC,IAAD,GAAC,MAAD,GAACY,GAAaD,QAAb,CAAsBD,MAAtB,CAAD,CAAP;AACF","names":["getOwnerDocument","useEffect","useRef","useOutsideClick","props","ref","handler","enabled","savedHandler","useCallbackRef","stateRef","isPointerDown","ignoreEmulatedMouseEvents","state","current","onPointerDown","e","isValidEvent","onMouseUp","event","onTouchEnd","doc","addEventListener","removeEventListener","target","contains","_a"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-outside-click.ts"],"sourcesContent":["import { getOwnerDocument } from \"@chakra-ui/utils\"\nimport { useEffect, useRef } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport interface UseOutsideClickProps {\n  /**\n   * Whether the hook is enabled\n   */\n  enabled?: boolean\n  /**\n   * The reference to a DOM element.\n   */\n  ref: React.RefObject<HTMLElement>\n  /**\n   * Function invoked when a click is triggered outside the referenced element.\n   */\n  handler?: (e: Event) => void\n}\n\n/**\n * Example, used in components like Dialogs and Popovers, so they can close\n * when a user clicks outside them.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-outside-click\n */\nexport function useOutsideClick(props: UseOutsideClickProps) {\n  const { ref, handler, enabled = true } = props\n  const savedHandler = useCallbackRef(handler)\n\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n  })\n\n  const state = stateRef.current\n\n  useEffect(() => {\n    if (!enabled) return\n    const onPointerDown: any = (e: PointerEvent) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true\n      }\n    }\n\n    const onMouseUp: any = (event: MouseEvent) => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false\n        return\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const onTouchEnd = (event: TouchEvent) => {\n      state.ignoreEmulatedMouseEvents = true\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const doc = getOwnerDocument(ref.current)\n    doc.addEventListener(\"mousedown\", onPointerDown, true)\n    doc.addEventListener(\"mouseup\", onMouseUp, true)\n    doc.addEventListener(\"touchstart\", onPointerDown, true)\n    doc.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true)\n      doc.removeEventListener(\"mouseup\", onMouseUp, true)\n      doc.removeEventListener(\"touchstart\", onPointerDown, true)\n      doc.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [handler, ref, savedHandler, state, enabled])\n}\n\nfunction isValidEvent(event: Event, ref: React.RefObject<HTMLElement>) {\n  const target = event.target as HTMLElement\n\n  if (target) {\n    const doc = getOwnerDocument(target)\n    if (!doc.contains(target)) return false\n  }\n\n  return !ref.current?.contains(target)\n}\n"]},"metadata":{},"sourceType":"module"}