{"ast":null,"code":"'use client'; // src/use-const.ts\n\nimport { useRef } from \"react\";\n\nfunction useConst(init) {\n  const ref = useRef(null);\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n\n  return ref.current;\n}\n\nexport { useConst };","map":{"version":3,"mappings":";;AAAA,SAASA,MAAT,QAAuB,OAAvB;;AAWO,SAASC,QAAT,CAAiCC,IAAjC,EAAyD;EAI9D,MAAMC,MAAMH,OAAiB,IAAjB,CAAZ;;EAEA,IAAIG,IAAIC,OAAJ,KAAgB,IAApB,EAA0B;IACxBD,IAAIC,OAAJ,GAAc,OAAOF,IAAP,KAAgB,UAAhB,GAA8BA,MAA9B,GAAqDA,IAAnE;EACF;;EAEA,OAAOC,IAAIC,OAAX;AACF","names":["useRef","useConst","init","ref","current"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-const.ts"],"sourcesContent":["import { useRef } from \"react\"\n\ntype InitFn<T> = () => T\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConst`\n * you can ensure that initializers don't execute twice or more.\n */\nexport function useConst<T extends any>(init: T | InitFn<T>): T {\n  // Use useRef to store the value because it's the least expensive built-in\n  // hook that works here. We could also use `useState` but that's more\n  // expensive internally due to reducer handling which we don't need.\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? (init as InitFn<T>)() : init\n  }\n\n  return ref.current as T\n}\n"]},"metadata":{},"sourceType":"module"}