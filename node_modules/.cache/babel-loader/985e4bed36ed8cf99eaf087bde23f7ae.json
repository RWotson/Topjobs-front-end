{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\"; // src/use-focus-on-hide.ts\n\nimport { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\n\nfunction preventReturnFocus(containerRef) {\n  const el = containerRef.current;\n  if (!el) return false;\n  const activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\n\nfunction useFocusOnHide(containerRef, options) {\n  const {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  const shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n\n    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n\n    if (el) {\n      focus(el, {\n        nextTick: true\n      });\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\n\nexport { useFocusOnHide };","map":{"version":3,"mappings":";;;;AAAA,SACEA,QADF,EAEEC,KAFF,EAIEC,gBAJF,EAKEC,UALF,QAMO,kBANP;;AAgBA,SAASC,kBAAT,CAA4BC,YAA5B,EAAwE;EACtE,MAAMC,KAAKD,aAAaE,OAAxB;EACA,IAAI,CAACD,EAAL,EAAS,OAAO,KAAP;EAET,MAAME,gBAAgBN,iBAAiBI,EAAjB,CAAtB;EAEA,IAAI,CAACE,aAAL,EAAoB,OAAO,KAAP;EACpB,IAAIR,SAASM,EAAT,EAAaE,aAAb,CAAJ,EAAiC,OAAO,KAAP;EACjC,IAAIL,WAAWK,aAAX,CAAJ,EAA+B,OAAO,IAAP;EAE/B,OAAO,KAAP;AACF;;AASO,SAASC,cAAT,CACLJ,YADK,EAELK,OAFK,EAGL;EACA,MAAM;IAAEC,aAAaC,eAAf;IAAgCC,OAAhC;IAAyCC;EAAzC,IAAsDJ,OAA5D;EAEA,MAAMC,cAAcC,mBAAmB,CAACC,OAAxC;EAEAE,gBAAgB,MAAM;IACpB,IAAI,CAACJ,WAAL,EAAkB;;IAElB,IAAIP,mBAAmBC,YAAnB,CAAJ,EAAsC;MACpC;IACF;;IAEA,MAAMC,MAAKQ,qCAAUP,OAAf,KAA0BF,aAAaE,OAA7C;;IAEA,IAAID,EAAJ,EAAQ;MACNL,MAAMK,EAAN,EAAU;QAAEU,UAAU;MAAZ,CAAV;IACF;EACF,CAZA,EAYG,CAACL,WAAD,EAAcN,YAAd,EAA4BS,QAA5B,CAZH;AAaF","names":["contains","focus","getActiveElement","isTabbable","preventReturnFocus","containerRef","el","current","activeElement","useFocusOnHide","options","shouldFocus","shouldFocusProp","visible","focusRef","useUpdateEffect","nextTick"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-focus-on-hide.ts"],"sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el, { nextTick: true })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"]},"metadata":{},"sourceType":"module"}