{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senethg\\\\Desktop\\\\Mobile App\\\\Test\\\\test server\\\\Gymekalk\\\\client\\\\src\\\\dashbord\\\\Packages.js\";\nimport React from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport PackageCard from \"./packagesitem/PackageCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Packages = () => {\n  const handlePay = async (packageId, amount) => {\n    try {\n      const token = localStorage.getItem('usersdatatoken');\n      const startDate = new Date();\n      const endDate = calculateEndDate(startDate);\n      const response = await fetch(\"/subscribe\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        },\n        body: JSON.stringify({\n          packageId,\n          startDate,\n          endDate,\n          paymentStatus: \"paid\"\n        })\n      });\n\n      if (response.ok) {\n        // Check if the user exists\n        const userResponse = await fetch(\"/user\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: token\n          }\n        });\n\n        if (userResponse.ok) {\n          const user = await userResponse.json(); // Update the user details\n\n          user.packageId = packageId;\n          user.startDate = startDate;\n          user.endDate = endDate;\n          user.paymentStatus = \"paid\"; // Save the updated user details in the database\n\n          const updateUserResponse = await fetch(\"/user\", {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: token\n            },\n            body: JSON.stringify(user)\n          });\n\n          if (updateUserResponse.ok) {\n            toast.success(\"Subscription and payment successful\");\n          } else {\n            toast.error(\"Failed to update user details\");\n          }\n        } else {\n          throw new Error(\"User not found\");\n        }\n      } else {\n        throw new Error(\"Payment failed\");\n      }\n    } catch (error) {\n      console.error(\"Error processing subscription and payment:\", error);\n      toast.error(\"Payment failed\");\n    }\n  };\n\n  const calculateEndDate = startDate => {\n    const currentMonth = startDate.getMonth();\n    const currentYear = startDate.getFullYear();\n    let nextMonth = currentMonth + 1;\n    let nextYear = currentYear;\n\n    if (nextMonth === 12) {\n      nextMonth = 0;\n      nextYear = currentYear + 1;\n    }\n\n    const nextMonthFirstDay = new Date(nextYear, nextMonth, 1);\n    const endDate = new Date(nextMonthFirstDay.getTime() - 1);\n    return endDate;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 py-8 bg-gray-300\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8\",\n      children: \"Subscription Packages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\",\n      children: /*#__PURE__*/_jsxDEV(PackageCard, {\n        packageInfo: {\n          name: \"Package A\",\n          amount: 25\n        },\n        onPay: () => handlePay(1, 25)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Packages;\nexport default Packages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Packages\");","map":{"version":3,"names":["React","ToastContainer","toast","PackageCard","Packages","handlePay","packageId","amount","token","localStorage","getItem","startDate","Date","endDate","calculateEndDate","response","fetch","method","headers","Authorization","body","JSON","stringify","paymentStatus","ok","userResponse","user","json","updateUserResponse","success","error","Error","console","currentMonth","getMonth","currentYear","getFullYear","nextMonth","nextYear","nextMonthFirstDay","getTime","name"],"sources":["C:/Users/senethg/Desktop/Mobile App/Test/test server/Gymekalk/client/src/dashbord/Packages.js"],"sourcesContent":["import React from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport PackageCard from \"./packagesitem/PackageCard\";\r\n\r\nconst Packages = () => {\r\n  \r\n  const handlePay = async (packageId, amount) => {\r\n    try {\r\n      const token = localStorage.getItem('usersdatatoken');\r\n      const startDate = new Date();\r\n      const endDate = calculateEndDate(startDate);\r\n  \r\n      const response = await fetch(\"/subscribe\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n        body: JSON.stringify({\r\n          packageId,\r\n          startDate,\r\n          endDate,\r\n          paymentStatus: \"paid\",\r\n        }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        // Check if the user exists\r\n        const userResponse = await fetch(\"/user\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        });\r\n  \r\n        if (userResponse.ok) {\r\n          const user = await userResponse.json();\r\n  \r\n          // Update the user details\r\n          user.packageId = packageId;\r\n          user.startDate = startDate;\r\n          user.endDate = endDate;\r\n          user.paymentStatus = \"paid\";\r\n  \r\n          // Save the updated user details in the database\r\n          const updateUserResponse = await fetch(\"/user\", {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n            body: JSON.stringify(user),\r\n          });\r\n  \r\n          if (updateUserResponse.ok) {\r\n            toast.success(\"Subscription and payment successful\");\r\n          } else {\r\n            toast.error(\"Failed to update user details\");\r\n          }\r\n        } else {\r\n          throw new Error(\"User not found\");\r\n        }\r\n      } else {\r\n        throw new Error(\"Payment failed\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error processing subscription and payment:\", error);\r\n      toast.error(\"Payment failed\");\r\n    }\r\n  };\r\n  \r\n  const calculateEndDate = (startDate) => {\r\n    const currentMonth = startDate.getMonth();\r\n    const currentYear = startDate.getFullYear();\r\n\r\n    let nextMonth = currentMonth + 1;\r\n    let nextYear = currentYear;\r\n\r\n    if (nextMonth === 12) {\r\n      nextMonth = 0;\r\n      nextYear = currentYear + 1;\r\n    }\r\n\r\n    const nextMonthFirstDay = new Date(nextYear, nextMonth, 1);\r\n    const endDate = new Date(nextMonthFirstDay.getTime() - 1);\r\n\r\n    return endDate;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8 bg-gray-300\">\r\n      <h1 className=\"text-3xl font-bold mb-8\">Subscription Packages</h1>\r\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\r\n        <PackageCard\r\n          packageInfo={{ name: \"Package A\", amount: 25 }}\r\n          onPay={() => handlePay(1, 25)}\r\n        />\r\n        {/* Add more PackageCard components here */}\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Packages;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}