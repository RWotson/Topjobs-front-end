{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senethg\\\\Desktop\\\\Mobile App\\\\Test\\\\test server\\\\Gymekalk\\\\client\\\\src\\\\components\\\\homepage\\\\ForgotPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Box, Button, FormControl, FormLabel, Input } from \"@chakra-ui/react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForgotPassword = () => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [otp, setOTP] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [showOTPForm, setShowOTPForm] = useState(false);\n\n  const handleSendOTP = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8009/forgot-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to send OTP\");\n      }\n\n      toast.success(\"OTP sent to your email\");\n      setShowOTPForm(true); // Show OTP input form\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Failed to send OTP\");\n    }\n  };\n\n  const handleResetPassword = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8009/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          otp,\n          newPassword\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to reset password\");\n      }\n\n      toast.success(\"Password reset successfully\");\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Failed to reset password\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-background\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        maxW: \"md\",\n        mx: \"auto\",\n        p: \"6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-30 bg-gray-100 rounded-xl\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 4,\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                id: \"email\",\n                isRequired: true,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"email\",\n                  value: email,\n                  onChange: e => setEmail(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                colorScheme: \"blue\",\n                mt: 4,\n                onClick: handleSendOTP,\n                children: \"Send OTP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), showOTPForm && /*#__PURE__*/_jsxDEV(\"form\", {\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                id: \"otp\",\n                isRequired: true,\n                mt: 4,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  children: \"OTP\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  value: otp,\n                  onChange: e => setOTP(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                id: \"newPassword\",\n                isRequired: true,\n                mt: 4,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  children: \"New Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"password\",\n                  value: newPassword,\n                  onChange: e => setNewPassword(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                colorScheme: \"blue\",\n                mt: 4,\n                onClick: handleResetPassword,\n                children: \"Reset Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\" \", /*#__PURE__*/_jsxDEV(NavLink, {\n                  to: \"/forget-password\",\n                  children: \"Back to Login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 23\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForgotPassword, \"2yiTDXIEeYpyQ5LtkUCBrza/4q8=\");\n\n_c = ForgotPassword;\nexport default ForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","Box","Button","FormControl","FormLabel","Input","ChakraProvider","ToastContainer","toast","NavLink","ForgotPassword","email","setEmail","otp","setOTP","newPassword","setNewPassword","showOTPForm","setShowOTPForm","handleSendOTP","response","fetch","method","headers","body","JSON","stringify","ok","Error","success","error","console","handleResetPassword","e","target","value"],"sources":["C:/Users/senethg/Desktop/Mobile App/Test/test server/Gymekalk/client/src/components/homepage/ForgotPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { NavLink} from \"react-router-dom\"\r\n\r\n\r\nconst ForgotPassword = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [otp, setOTP] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [showOTPForm, setShowOTPForm] = useState(false);\r\n\r\n  const handleSendOTP = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8009/forgot-password\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ email })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to send OTP\");\r\n      }\r\n\r\n      toast.success(\"OTP sent to your email\");\r\n      setShowOTPForm(true); // Show OTP input form\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Failed to send OTP\");\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8009/reset-password\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ email, otp, newPassword })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to reset password\");\r\n      }\r\n\r\n      toast.success(\"Password reset successfully\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Failed to reset password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <div className=\"form-background\">\r\n        <Box maxW=\"md\" mx=\"auto\" p=\"6\">\r\n          <div className=\"m-30 bg-gray-100 rounded-xl\">\r\n            <Box p={4}>\r\n              <form>\r\n                <FormControl id=\"email\" isRequired>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <Input\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </FormControl>\r\n                <Button\r\n                  type=\"button\"\r\n                  colorScheme=\"blue\"\r\n                  mt={4}\r\n                  onClick={handleSendOTP}\r\n                >\r\n                  Send OTP\r\n                </Button>\r\n              </form>\r\n              {showOTPForm && (\r\n                <form>\r\n                  <FormControl id=\"otp\" isRequired mt={4}>\r\n                    <FormLabel>OTP</FormLabel>\r\n                    <Input\r\n                      type=\"text\"\r\n                      value={otp}\r\n                      onChange={(e) => setOTP(e.target.value)}\r\n                    />\r\n                  </FormControl>\r\n                  <FormControl id=\"newPassword\" isRequired mt={4}>\r\n                    <FormLabel>New Password</FormLabel>\r\n                    <Input\r\n                      type=\"password\"\r\n                      value={newPassword}\r\n                      onChange={(e) => setNewPassword(e.target.value)}\r\n                    />\r\n                  </FormControl>\r\n                  <Button\r\n                    type=\"button\"\r\n                    colorScheme=\"blue\"\r\n                    mt={4}\r\n                    onClick={handleResetPassword}\r\n                  >\r\n                    Reset Password\r\n                  </Button>\r\n                  <p> <NavLink to=\"/forget-password\">Back to Login</NavLink> </p>\r\n                </form>\r\n              )}\r\n            </Box>\r\n          </div>\r\n        </Box>\r\n      </div>\r\n      <ToastContainer /> {/* Toastify container */}\r\n    </ChakraProvider>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}