{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\";\nimport { useEventListener } from \"./chunk-7JEV5YKL.mjs\";\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\"; // src/use-focus-on-show.ts\n\nimport { contains, focus, getAllFocusable, isRefObject } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\n\nfunction useFocusOnShow(target) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  const element = isRefObject(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef(autoFocusValue);\n  const lastVisibleRef = useRef(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (contains(element, document.activeElement)) return;\n\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll,\n        nextTick: true\n      });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll,\n          nextTick: true\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\n\nexport { useFocusOnShow };","map":{"version":3,"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,KAFF,EAIEC,eAJF,EAKEC,WALF,QAMO,kBANP;AAOA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AAYA,IAAMC,iBAAwC;EAC5CC,eAAe,IAD6B;EAE5CC,aAAa;AAF+B,CAA9C;;AAKO,SAASC,cAAT,CACLC,MADK,EAGL;EAAA,IADAC,OACA,uEADUL,cACV;EACA,MAAM;IAAEM,QAAF;IAAYL,aAAZ;IAA2BC,WAA3B;IAAwCK;EAAxC,IAAoDF,OAA1D;EACA,MAAMG,UAAUX,YAAYO,MAAZ,IAAsBA,OAAOK,OAA7B,GAAuCL,MAAvD;EACA,MAAMM,iBAAiBR,eAAeK,OAAtC;EACA,MAAMI,eAAeZ,OAAOW,cAAP,CAArB;EACA,MAAME,iBAAiBb,OAAOQ,OAAP,CAAvB;EAEAM,oBAAoB,MAAM;IACxB,IAAI,CAACD,eAAeH,OAAhB,IAA2BF,OAA/B,EAAwC;MACtCI,aAAaF,OAAb,GAAuBC,cAAvB;IACF;;IACAE,eAAeH,OAAf,GAAyBF,OAAzB;EACF,CALA,EAKG,CAACA,OAAD,EAAUG,cAAV,CALH;EAOA,MAAMI,UAAUhB,YAAY,MAAM;IAChC,IAAI,CAACS,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACG,aAAaF,OAA1C,EAAmD;IACnDE,aAAaF,OAAb,GAAuB,KAAvB;IAEA,IAAIf,SAASc,OAAT,EAAkBO,SAASC,aAA3B,CAAJ,EAA8D;;IAE9D,IAAIV,qCAAUG,OAAd,EAAuB;MACrBd,MAAMW,SAASG,OAAf,EAAwB;QAAER,aAAF;QAAiBgB,UAAU;MAA3B,CAAxB;IACF,CAFA,MAEO;MACL,MAAMC,cAActB,gBAAgBY,OAAhB,CAApB;;MACA,IAAIU,YAAYC,MAAZ,GAAqB,CAAzB,EAA4B;QAC1BxB,MAAMuB,YAAY,CAAZ,CAAN,EAAsB;UAAEjB,aAAF;UAAiBgB,UAAU;QAA3B,CAAtB;MACF;IACF;EACF,CAdgB,EAcb,CAACV,OAAD,EAAUN,aAAV,EAAyBO,OAAzB,EAAkCF,QAAlC,CAda,CAAhB;EAgBAc,gBAAgB,MAAM;IACpBN;EACF,CAFA,EAEG,CAACA,OAAD,CAFH;EAIAO,iBAAiB,eAAjB,EAAkCP,OAAlC,EAA2CN,OAA3C;AACF","names":["contains","focus","getAllFocusable","isRefObject","useCallback","useRef","defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocusValue","autoFocusRef","lastVisibleRef","useSafeLayoutEffect","onFocus","document","activeElement","nextTick","tabbableEls","length","useUpdateEffect","useEventListener"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-focus-on-show.ts"],"sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useRef } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n  const autoFocusValue = shouldFocus && visible\n  const autoFocusRef = useRef(autoFocusValue)\n  const lastVisibleRef = useRef(visible)\n\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue\n    }\n    lastVisibleRef.current = visible\n  }, [visible, autoFocusValue])\n\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return\n    autoFocusRef.current = false\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll, nextTick: true })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll, nextTick: true })\n      }\n    }\n  }, [visible, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"]},"metadata":{},"sourceType":"module"}