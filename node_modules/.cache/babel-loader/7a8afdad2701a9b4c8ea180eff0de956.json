{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-controllable.ts\n\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useControllableProp(prop, state) {\n  const isControlled = prop !== void 0;\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\n\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [valueState, setValue] = useState(defaultValue);\n  const isControlled = valueProp !== void 0;\n  const value = isControlled ? valueProp : valueState;\n  const updateValue = useCallback(next => {\n    const nextValue = runIfFn(next, value);\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [isControlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, updateValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAGO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;EACpE,MAAMC,eAAeF,SAAS,MAA9B;EACA,MAAMG,QAAQD,gBAAgB,OAAOF,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;EACA,OAAO,CAACC,YAAD,EAAeC,KAAf,CAAP;AACF;;AAyBO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;EAC3E,MAAM;IACJF,OAAOG,SADH;IAEJC,YAFI;IAGJC,QAHI;IAIJC,eAAe,CAACC,IAAD,EAAOC,IAAP,KAAgBD,SAASC;EAJpC,IAKFN,KALJ;EAMA,MAAMO,eAAeC,eAAeL,QAAf,CAArB;EACA,MAAMM,mBAAmBD,eAAeJ,YAAf,CAAzB;EAEA,MAAM,CAACM,UAAD,EAAaC,QAAb,IAAyBlB,SAASS,YAAT,CAA/B;EAEA,MAAML,eAAeI,cAAc,MAAnC;EACA,MAAMH,QAAQD,eAAgBI,SAAhB,GAAkCS,UAAhD;EAEA,MAAME,cAAcpB,YACjBc,IAAD,IAAmC;IACjC,MAAMO,YAAYtB,QAAQe,IAAR,EAAcR,KAAd,CAAlB;;IAEA,IAAI,CAACW,iBAAiBX,KAAjB,EAAwBe,SAAxB,CAAL,EAAyC;MACvC;IACF;;IAEA,IAAI,CAAChB,YAAL,EAAmB;MACjBc,SAASE,SAAT;IACF;;IAEAN,aAAaM,SAAb;EACF,CAbkB,EAclB,CAAChB,YAAD,EAAeU,YAAf,EAA6BT,KAA7B,EAAoCW,gBAApC,CAdkB,CAApB;EAiBA,OAAO,CAACX,KAAD,EAAQc,WAAR,CAAP;AACF","names":["runIfFn","useCallback","useState","useControllableProp","prop","state","isControlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","useCallbackRef","shouldUpdateProp","valueState","setValue","updateValue","nextValue"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-controllable.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}