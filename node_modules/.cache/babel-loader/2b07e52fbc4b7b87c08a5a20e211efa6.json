{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senethg\\\\Desktop\\\\Mobile App\\\\Test\\\\test server\\\\Gymekalk\\\\client\\\\src\\\\components\\\\homepage\\\\BookAppoinment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Box, Button, FormControl, FormLabel, Input, VStack, HStack, Text, useToast, useColorModeValue } from \"@chakra-ui/react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(\"pk_test_51OviJeSCkJx3glD9ied9hu2ePHsjoU9Mt6FNwEHH1mv5OcKneWEFqNqZYHioWCwiSCZxnHBvi98qm01TYjPYotAr00ALHdsty4\");\n\nconst BookAppointment = () => {\n  _s();\n\n  const [step, setStep] = useState(1);\n  const [appointmentData, setAppointmentData] = useState({\n    date: \"\",\n    location: \"\",\n    description: \"\"\n  });\n  const [paymentData, setPaymentData] = useState({\n    amount: \"\",\n    token: null\n  });\n  const toast = useToast();\n  const bgColor = useColorModeValue(\"gray.100\", \"gray.700\");\n\n  const handleAppointmentSubmit = () => {\n    setStep(2);\n  };\n\n  const handlePaymentSubmit = async () => {\n    try {\n      const stripe = await stripePromise;\n      const response = await fetch(\"/payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(paymentData)\n      });\n      const paymentIntent = await response.json();\n      const result = await stripe.redirectToCheckout({\n        sessionId: paymentIntent.sessionId\n      });\n\n      if (result.error) {\n        throw new Error(result.error.message);\n      }\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to process payment\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-indigo-100 min-h-screen flex rounded-lg\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      p: 4,\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        spacing: 8,\n        children: [step === 1 && /*#__PURE__*/_jsxDEV(Box, {\n          bg: bgColor,\n          p: 4,\n          borderRadius: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"date\",\n              value: appointmentData.date,\n              onChange: e => setAppointmentData({ ...appointmentData,\n                date: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              value: appointmentData.location,\n              onChange: e => setAppointmentData({ ...appointmentData,\n                location: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              value: appointmentData.description,\n              onChange: e => setAppointmentData({ ...appointmentData,\n                description: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleAppointmentSubmit,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), step === 2 && /*#__PURE__*/_jsxDEV(Box, {\n          bg: bgColor,\n          p: 4,\n          borderRadius: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              value: paymentData.amount,\n              onChange: e => setPaymentData({ ...paymentData,\n                amount: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: async () => {\n              const stripe = await stripePromise;\n              const {\n                error\n              } = await stripe.redirectToCheckout({\n                sessionId: paymentData.sessionId\n              });\n\n              if (error) {\n                console.error(\"Error:\", error);\n              }\n            },\n            role: \"link\",\n            children: \"Pay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointment, \"CxWV9XiKIUspkqpL7dj45/MCkIw=\", false, function () {\n  return [useToast, useColorModeValue];\n});\n\n_c = BookAppointment;\nexport default BookAppointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"names":["React","useState","Box","Button","FormControl","FormLabel","Input","VStack","HStack","Text","useToast","useColorModeValue","loadStripe","stripePromise","BookAppointment","step","setStep","appointmentData","setAppointmentData","date","location","description","paymentData","setPaymentData","amount","token","toast","bgColor","handleAppointmentSubmit","handlePaymentSubmit","stripe","response","fetch","method","headers","body","JSON","stringify","paymentIntent","json","result","redirectToCheckout","sessionId","error","Error","message","console","title","status","duration","isClosable","e","target","value"],"sources":["C:/Users/senethg/Desktop/Mobile App/Test/test server/Gymekalk/client/src/components/homepage/BookAppoinment.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  VStack,\r\n  HStack,\r\n  Text,\r\n  useToast,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nconst stripePromise = loadStripe(\"pk_test_51OviJeSCkJx3glD9ied9hu2ePHsjoU9Mt6FNwEHH1mv5OcKneWEFqNqZYHioWCwiSCZxnHBvi98qm01TYjPYotAr00ALHdsty4\");\r\n\r\nconst BookAppointment = () => {\r\n  const [step, setStep] = useState(1);\r\n  const [appointmentData, setAppointmentData] = useState({\r\n    date: \"\",\r\n    location: \"\",\r\n    description: \"\"\r\n  });\r\n  const [paymentData, setPaymentData] = useState({\r\n    amount: \"\",\r\n    token: null\r\n  });\r\n  const toast = useToast();\r\n  const bgColor = useColorModeValue(\"gray.100\", \"gray.700\");\r\n\r\n  const handleAppointmentSubmit = () => {\r\n    setStep(2);\r\n  };\r\n\r\n  const handlePaymentSubmit = async () => {\r\n    try {\r\n      const stripe = await stripePromise;\r\n      const response = await fetch(\"/payment\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(paymentData)\r\n      });\r\n      const paymentIntent = await response.json();\r\n      const result = await stripe.redirectToCheckout({\r\n        sessionId: paymentIntent.sessionId\r\n      });\r\n      if (result.error) {\r\n        throw new Error(result.error.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to process payment\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='bg-indigo-100 min-h-screen flex rounded-lg'>\r\n         <Box p={4}>\r\n      <VStack spacing={8}>\r\n        {step === 1 && (\r\n          <Box bg={bgColor} p={4} borderRadius=\"md\">\r\n            <FormControl>\r\n              <FormLabel>Date</FormLabel>\r\n              <Input\r\n                type=\"date\"\r\n                value={appointmentData.date}\r\n                onChange={(e) =>\r\n                  setAppointmentData({ ...appointmentData, date: e.target.value })\r\n                }\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <FormLabel>Location</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                value={appointmentData.location}\r\n                onChange={(e) =>\r\n                  setAppointmentData({ ...appointmentData, location: e.target.value })\r\n                }\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <FormLabel>Description</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                value={appointmentData.description}\r\n                onChange={(e) =>\r\n                  setAppointmentData({ ...appointmentData, description: e.target.value })\r\n                }\r\n              />\r\n            </FormControl>\r\n            <Button onClick={handleAppointmentSubmit}>Next</Button>\r\n          </Box>\r\n        )}\r\n        {step === 2 && (\r\n          <Box bg={bgColor} p={4} borderRadius=\"md\">\r\n            <FormControl>\r\n              <FormLabel>Amount</FormLabel>\r\n              <Input\r\n                type=\"number\"\r\n                value={paymentData.amount}\r\n                onChange={(e) =>\r\n                  setPaymentData({ ...paymentData, amount: e.target.value })\r\n                }\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              onClick={async () => {\r\n                const stripe = await stripePromise;\r\n                const { error } = await stripe.redirectToCheckout({\r\n                  sessionId: paymentData.sessionId\r\n                });\r\n                if (error) {\r\n                  console.error(\"Error:\", error);\r\n                }\r\n              }}\r\n              role=\"link\"\r\n            >\r\n              Pay\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </VStack>\r\n    </Box>\r\n\r\n    </div>    \r\n   \r\n  );\r\n};\r\n\r\nexport default BookAppointment;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}