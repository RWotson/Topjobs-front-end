{"ast":null,"code":"'use client'; // src/use-id.ts\n\nimport { useCallback, useId as useReactId, useMemo, useState } from \"react\";\n\nfunction useId(idProp, prefix) {\n  const id = useReactId();\n  return useMemo(() => idProp || [prefix, id].filter(Boolean).join(\"-\"), [idProp, prefix, id]);\n}\n\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  const id = useId(idProp);\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\nfunction useOptionalPart(partId) {\n  const [id, setId] = useState(null);\n  const ref = useCallback(node => {\n    setId(node ? partId : null);\n  }, [partId]);\n  return {\n    ref,\n    id,\n    isRendered: Boolean(id)\n  };\n}\n\nexport { useId, useIds, useOptionalPart };","map":{"version":3,"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAASC,UAA/B,EAA2CC,OAA3C,EAAoDC,QAApD,QAAoE,OAApE;;AAEO,SAASH,KAAT,CAAeI,MAAf,EAAgCC,MAAhC,EAAyD;EAC9D,MAAMC,KAAKL,YAAX;EAEA,OAAOC,QACL,MAAME,UAAU,CAACC,MAAD,EAASC,EAAT,EAAaC,MAAb,CAAoBC,OAApB,EAA6BC,IAA7B,CAAkC,GAAlC,CADX,EAEL,CAACL,MAAD,EAASC,MAAT,EAAiBC,EAAjB,CAFK,CAAP;AAIF;;AAiBO,SAASI,MAAT,CAAgBN,MAAhB,EAAwD;EAAA,kCAApBO,QAAoB;IAApBA,QAAoB;EAAA;;EAC7D,MAAML,KAAKN,MAAMI,MAAN,CAAX;EACA,OAAOF,QAAQ,MAAM;IACnB,OAAOS,SAASC,GAAT,CAAcP,MAAD,IAAY,GAAGA,MAAM,IAAIC,EAAE,EAAxC,CAAP;EACF,CAFO,EAEJ,CAACA,EAAD,EAAKK,QAAL,CAFI,CAAP;AAGF;;AAWO,SAASE,eAAT,CAAkCC,MAAlC,EAAkD;EACvD,MAAM,CAACR,EAAD,EAAKS,KAAL,IAAcZ,SAAwB,IAAxB,CAApB;EACA,MAAMa,MAAMjB,YACTkB,IAAD,IAAa;IACXF,MAAME,OAAOH,MAAP,GAAgB,IAAtB;EACF,CAHU,EAIV,CAACA,MAAD,CAJU,CAAZ;EAMA,OAAO;IAAEE,GAAF;IAAOV,EAAP;IAAWY,YAAYV,QAAQF,EAAR;EAAvB,CAAP;AACF","names":["useCallback","useId","useReactId","useMemo","useState","idProp","prefix","id","filter","Boolean","join","useIds","prefixes","map","useOptionalPart","partId","setId","ref","node","isRendered"],"sources":["C:\\Users\\senethg\\Desktop\\Mobile App\\Test\\test server\\Gymekalk\\client\\node_modules\\@chakra-ui\\hooks\\src\\use-id.ts"],"sourcesContent":["import { useCallback, useId as useReactId, useMemo, useState } from \"react\"\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const id = useReactId()\n\n  return useMemo(\n    () => idProp || [prefix, id].filter(Boolean).join(\"-\"),\n    [idProp, prefix, id],\n  )\n}\n\n/**\n * React hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered, so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = useState<string | null>(null)\n  const ref = useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"]},"metadata":{},"sourceType":"module"}